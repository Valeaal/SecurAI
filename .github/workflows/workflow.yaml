name: Build SecurAI

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - testRelease
      - macARM
    paths:
      - 'BackEnd/**'
      - 'FrontEnd/**'
      - 'main.js'
      - 'package.json'
      - '.github/workflows/*.yaml'

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: macos-13
            arch: x64
          - os: macos-13
            arch: arm64
          - os: windows-latest
            arch: x64
      fail-fast: false
    runs-on: ${{ matrix.os }}
    continue-on-error: true

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      # Inicialización de Python
      - name: Inicialización de Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      # Instalar dependencias del BackEnd
      - name: Instalación de dependencias de Python
        run: |
          pip install -r BackEnd/requirements.txt
          
          # Si estamos en macOS ARM, desinstalar tensorflow y usar tensorflow-macos
          if [[ "$(uname -m)" == "arm64" && "$RUNNER_OS" == "macOS" ]]; then
            pip uninstall -y tensorflow || true
            pip install tensorflow-macos
          fi
        shell: bash

      # Build del BackEnd
      - name: Caché del build del Backend con PyInstaller
        id: cache-pyinstaller
        uses: actions/cache@v4
        with:
          path: |
            BackEnd/build
            BackEnd/dist
          key: ${{ runner.os }}-pyinstaller-${{ hashFiles('BackEnd/run.spec', 'BackEnd/**.py') }}

      - name: Build del BackEnd con pyinstaller
        if: steps.cache-pyinstaller.outputs.cache-hit != 'true'
        run: |
          cd BackEnd
          pyinstaller --noconfirm run.spec
          cd dist
          cp -R run/_internal/* .
          rm -rf run
        shell: bash

      # Inicialización de Node.js
      - name: Inicialización de Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.3'
          cache: 'npm'

      # Instalar dependencias del FrontEnd
      - name: Instalación de dependencias del FrontEnd
        run: |
          cd FrontEnd/app
          npm install

      # Build del FrontEnd
      - name: Caché de la build del FrontEnd
        id: cache-next-build
        uses: actions/cache@v4
        with:
          path: FrontEnd/app/.next
          key: ${{ runner.os }}-next-build-${{ hashFiles('FrontEnd/app/package.json', 'FrontEnd/app/package-lock.json') }}
          restore-keys: ${{ runner.os }}-next-build-

      - name: Build del Frontend
        if: steps.cache-next-build.outputs.cache-hit != 'true'
        run: |
          cd FrontEnd/app
          npm run build
      
      # Instalar dependencias de Electron
      - name: Instalación de dependencias de Electron
        run: |
          npm install

      # Build de la app completa
      - name: Caché de la build completa de Electron
        id: cache-electron-build
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ runner.os }}-electron-build-${{ hashFiles('package.json', 'package-lock.json', 'disr/latest.yml', 'latest-mac.yml') }}
          restore-keys: ${{ runner.os }}-electron-build-

      - name: Build de la app completa
        if: steps.cache-electron-build.outputs.cache-hit != 'true'
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            PUBLISH_FLAG="--publish always"
          else
            PUBLISH_FLAG="--publish never"
          fi

          if [[ "$RUNNER_OS" == "macOS" ]]; then
            ARCH=$(uname -m)
            if [[ "$ARCH" == "arm64" ]]; then
              npx electron-builder --mac --arm64 $PUBLISH_FLAG
            else
              npx electron-builder --mac --x64 $PUBLISH_FLAG
            fi
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            npx electron-builder --win --x64 $PUBLISH_FLAG
          fi
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Subir artefactos de prueba
        if: github.ref_name == 'testRelease'
        uses: actions/upload-artifact@v4
        with:
          name: SecurAI-${{ runner.os }}-${{ matrix.arch }}-build
          path: |
            dist/*.dmg
            dist/*.exe
