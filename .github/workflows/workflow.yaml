name: Build SecurAI

on:
  workflow_dispatch:
  push:
    paths:
      - 'BackEnd/**'
      - 'FrontEnd/**'
      - 'main.js'
      - 'package.json'
      - '.github/workflows/*.yaml'

jobs:
  build:
    strategy:
      matrix:
        os: [macos-13, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      # Inicialización de Python
      - name: Inicialización de Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Instalación de dependencias de Python
        run: pip install -r BackEnd/requirements.txt

      - name: Caché del build del Backend con PyInstaller
        id: cache-pyinstaller
        uses: actions/cache@v4
        with:
          path: |
            BackEnd/build
            BackEnd/dist
          key: ${{ runner.os }}-pyinstaller-${{ hashFiles('BackEnd/run.spec', 'BackEnd/**.py') }}

      - name: Build del BackEnd con pyinstaller
        if: steps.cache-pyinstaller.outputs.cache-hit != 'true'
        run: |
          cd BackEnd
          pyinstaller --noconfirm run.spec
          cd dist
          cp -R run/_internal/* .
          rm -rf run
        shell: bash

      # Inicialización de Node.js
      - name: Inicialización de Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.3'
          cache: 'npm'

      # Instalar dependencias del FrontEnd
      - name: Caché de dependencias de Node (Frontend)
        id: cache-node-frontend
        uses: actions/cache@v4
        with:
          path: FrontEnd/app/node_modules
          key: ${{ runner.os }}-node-frontend-${{ hashFiles('FrontEnd/app/package.json', 'FrontEnd/app/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-frontend-

      - name: Instalación de dependencias de Node (Frontend)
        if: steps.cache-node-frontend.outputs.cache-hit != 'true'
        run: |
          cd FrontEnd/app
          npm install

      # Caché de la build de Next.js (Frontend)
      - name: Caché de la build de Next.js
        id: cache-next-build
        uses: actions/cache@v4
        with:
          path: FrontEnd/app/.next  # Ruta de la carpeta .next
          key: ${{ runner.os }}-next-build-${{ hashFiles('FrontEnd/app/package.json', 'FrontEnd/app/package-lock.json') }}
          restore-keys: ${{ runner.os }}-next-build-

      # Construcción del Frontend
      - name: Construcción del Frontend
        run: |
          cd FrontEnd/app
          npm run build

      # Instalar dependencias de Electron (main.js)
      - name: Caché de dependencias de Node (Electron)
        id: cache-node-electron
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-electron-${{ hashFiles('package.json', 'package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-electron-

      - name: Instalación de dependencias de Node (Electron)
        if: steps.cache-node-electron.outputs.cache-hit != 'true'
        run: |
          npm install

      # Build de la app completa con Electron
      - name: Build de la app completa
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            npx electron-builder --mac --x64 --publish always
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            npx electron-builder --win --x64 --publish always
          fi
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
