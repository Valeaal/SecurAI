name: Build SecurAI
on:
  workflow_dispatch:
  push:
    paths:
      - 'BackEnd/**'
      - 'FrontEnd/**'
      - 'main.js'
      - 'package.json'
jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Inicialización de Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
    
      - name: Caché de dependencias de Python
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip # Linux/macOS
            ~\AppData\Local\pip\Cache # Windows
          key: ${{ runner.os }}-pip-${{ hashFiles('BackEnd/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Instalación de dependencias
        run: pip install -r BackEnd/requirements.txt

      - name: Caché del build del Backend con PyInstaller
        uses: actions/cache@v4
        with:
          path: |
            BackEnd/build
            BackEnd/dist
          key: ${{ runner.os }}-pyinstaller-${{ hashFiles('BackEnd/run.spec', 'BackEnd/**.py') }}

      - name: Build del BackEnd con pyinstaller
        run: |
            cd BackEnd
            pyinstaller --noconfirm run.spec
            cd ..
    
      - name: Inicialización de Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.3'
          cache: 'npm'
    
      - name: Caché de dependencias de Node
        uses: actions/cache@v4
        with:
            path: node_modules
            key: ${{ runner.os }}-node-${{ hashFiles('package.json', 'package-lock.json') }}
            restore-keys: ${{ runner.os }}-node-
    
      - name: Instalación de dependencias de Node
        run: npm install

      - name: Build de la app completa
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            npx electron-builder --mac --x64
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            npx electron-builder --win
          fi
        shell: bash
    
      - name: Determinar versión del release
        id: version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "tag_name=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
          else
            echo "tag_name=0.0.0" >> $GITHUB_OUTPUT
          fi

      - name: Publicar ejecutables en una Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.version.outputs.tag_name }}
          tag_name: ${{ steps.version.outputs.tag_name }}
          files: |
            dist/*.exe
            dist/*.dmg
            dist/*.zip
            dist/*.AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
